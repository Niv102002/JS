2D Array

PROGRAM 1 - WAP to store alphabets A-Z and a-z in a same 2D array.

#include <stdio.h>

void alpha(char [][2]);
void display(char[][2]);

int main()
{
	char alphabets[26][2];
	printf("Alphabets are : \n");
	alpha(alphabets);
	display(alphabets);
	
	return 0;
}


void alpha(char alphabets[26][2])
{
	int m,n;
	for(int i=0,m=65;i<26;i++,m++)
	{	
		alphabets[i][0]=m;
	}
	for (int n=97,j=0;j<26;j++,n++)
	{
		
		alphabets[j][1]=n;
	}
}



	
void display(char alphabets[26][2])
{
	int i,j;
	
	for (i=0;i<26;i++)
	{
		for (j=0;j<2;j++)
		{
			printf("%c ",alphabets[i][j]);
		}
		printf("\n");
	}
}





PROGRAM 2 - WAP to store multiplication table for numbers 2-5 in an 2D array. Use functions to display, function table (make use of pointer to array).

#include <stdio.h>

void mul(int [][4]);
void display (int [][4]);

int main()
{
	int table[10][4];
	printf("Multiplication table of 2 3 4 and 5 are : \n");
	mul(table);
	display (table);
	return 0;
}

void mul(int table[10][4])
{
    for(int i=0;i<10;i++)
    {
        for (int j=0;j<=4;j++)
    	{
    		*(*(table+i)+j)=(i+1)*(j+2);
    	}
    }
	
}

void display (int table[10][4])
{
	for(int i=0;i<10;i++)
    {
        for (int j=0;j<4;j++)
    	{
    		printf("%d ", *(*(table+i)+j));
    	}
    	printf("\n");
    }
}





PROGRAM 3 - Accept 3X3 array from user create and display its transpose using functions. 

#include <stdio.h>

void accept(int [3][3]);
void transpose(int [3][3], int [3][3]) ;
void display(int [3][3]); 

int main() {
    int matrix[3][3], transpose_matrix[3][3];

    accept(matrix);

    transpose(matrix, transpose_matrix);

    printf("\nOriginal Matrix :\n");
    display(matrix);

    printf("\nTranspose Matrix :\n");
    display(transpose_matrix);

    return 0;
}

void accept(int matrix[3][3]) 
{
    printf("Enter elements of the matrix :\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("Element [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

void transpose(int matrix[3][3], int transpose_matrix[3][3]) 
{
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            transpose_matrix[j][i] = matrix[i][j];
        }
    }
}

void display(int matrix[3][3]) 
{
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}





PROGRAM 4 - WAP to declare 2D arrays of size 3X3. Accept values for both arrays and find sum of matrixes. Use functions: Accept, Display, Addition, and if any more you need.

#include <stdio.h>

void accept(int arr[3][3]);
void sum(int arr1[3][3], int arr2[3][3], int sum[3][3]);
void display(int arr[3][3]);

int main()
{
    int array1[3][3], array2[3][3], sum_array[3][3];
    printf("Enter values for the first array:\n");
    accept(array1);
    printf("Enter values for the second array:\n");
    accept(array2);
    sum(array1, array2, sum_array);
    printf("Sum of the two arrays:\n");
    display(sum_array);
    return 0;
}

void accept(int arr[3][3])
{
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            scanf("%d", &arr[i][j]);
        }
    }
}

void sum(int arr1[3][3], int arr2[3][3], int sum_array[3][3])
{
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            sum_array[i][j] = arr1[i][j] + arr2[i][j];
        }
    }
}

void display(int arr[3][3])
{
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
}





PROGRAM 5 - Check if given matrix is Magic matrix or not. It is having sum of every row and every column and both diagonally.

e.g.
8 1 6
3 5 7
4 9 2

All row and col and diagonal elements have sum equal.

#include <stdio.h>

void accept(int [3][3]);
int Magic(int [3][3]);
void display(int [3][3]);

int main() 
{
    int matrix[3][3];

    accept(matrix);
    printf("\n");
    display(matrix);

    if (Magic(matrix)) 
    {
        printf("\nThe matrix is a Magic Matrix.\n");
    } 
    else 
    {
        printf("\nThe matrix is NOT a Magic Matrix.\n");
    }

    return 0;
}

void accept(int matrix[3][3]) 
{
    printf("Enter elements of the 3x3 matrix : \n");
    for (int i = 0; i < 3; i++) 
    {
        for (int j = 0; j < 3; j++) 
        {
            scanf("%d", &matrix[i][j]);
        }
    }
}

void display(int matrix[3][3]) 
{
    printf("Matrix : \n");
    for (int i = 0; i < 3; i++) 
    {
        for (int j = 0; j < 3; j++) 
        {
            printf("%d", matrix[i][j]);
            printf("\t");
        }
        printf("\n");
    }
}

int Magic(int matrix[3][3]) 
{
    int row_sum, col_sum;
    int diagonal_1 = 0, diagonal_2 = 0;
    int magic_sum = 0;

    for (int j = 0; j < 3; j++) 
    {
        magic_sum += matrix[0][j];
    }

    // Check the sum of all rows
    for (int i = 0; i < 3; i++) 
    {
        row_sum = 0;
        for (int j = 0; j < 3; j++) 
        {
            row_sum += matrix[i][j];
        }
        if (row_sum != magic_sum) 
        {
            return 0; 
        }
    }

    for (int j = 0; j < 3; j++) 
    {
        col_sum = 0;
        for (int i = 0; i < 3; i++) 
        {
            col_sum += matrix[i][j];
        }
        if (col_sum != magic_sum) 
        {
            return 0; 
        }
    }

    for (int i = 0; i < 3; i++) 
    {
        diagonal_1 += matrix[i][i];       
        diagonal_2 += matrix[i][2 - i];   
    }

    if (diagonal_1 != magic_sum || diagonal_2 != magic_sum) 
    {
        return 0; 
    }

    return 1; 
}





--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Storage classes

PROGRAM 6 - Write down a menu driven program to list 5 products on screen ask user to select and buy any products of his choice one by one by display menu again-n-again. Use macros to define prices for these products. Using function calculate_bill() you must calculate final bill amount.

#include <stdio.h>

#define PRODUCT1_PRICE 50
#define PRODUCT2_PRICE 70
#define PRODUCT3_PRICE 100
#define PRODUCT4_PRICE 50
#define PRODUCT5_PRICE 30

int total_bill;
void calculate_bill(int total_bill) 
{
    printf("Your total bill is: $%d\n", total_bill);
}

int main() 
{
    auto int choice;
    total_bill = 0;
    char buy_more;

    do 
    {
        printf("\n===== Product Menu =====\n");
        printf("1. Milk - $%d\n", PRODUCT1_PRICE);
        printf("2. Bread - $%d\n", PRODUCT2_PRICE);
        printf("3. Apples - $%d\n", PRODUCT3_PRICE);
        printf("4. Biscuits - $%d\n", PRODUCT4_PRICE);
        printf("5. Chips  - $%d\n", PRODUCT5_PRICE);
        printf("Enter the choice for the product to buy (1-5): ");
        
        scanf("%d", &choice);

        switch(choice) 
        {
            case 1:
                total_bill += PRODUCT1_PRICE;
                printf("Milk Added \n");
                break;
            case 2:
                total_bill += PRODUCT2_PRICE;
                printf("Bread Added \n");
                break;
            case 3:
                total_bill += PRODUCT3_PRICE;
                printf("Apples Added \n");
                break;
            case 4:
                total_bill += PRODUCT4_PRICE;
                printf("Biscuits Added \n");
                break;
            case 5:
                total_bill += PRODUCT5_PRICE;
                printf("Chips Added \n");
                break;
            default:
                printf("Invalid choice. Choose between 1-5.\n");
        }

        printf("Do you want to buy more products? (y/n): ");
        scanf("%c",&buy_more);
        char temp;
        scanf("%c",&temp); 
        buy_more = temp;    


    } while (buy_more == 'y' || buy_more == 'Y');

    calculate_bill(total_bill);

    return 0;
}




